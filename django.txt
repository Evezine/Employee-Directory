Django:

*Django is a popular  python framework
*it is not a programming language its an framework written in python programming language 

framework:
* framework is a collection software modules and tools which we use for building the software applications.
* frameworks could also resused
* it helps the developers to avoid the repetitive errors

framework vs mannual code:

* using frame work come with inbuilt feature
*ORM  django we have ORM (Object Relational Mapping) which handles all the database queries 
* passwords can stored in encrypted format
*PBKDF2(password based key derivation function-2)
*SHA-256 hashing technique recommend by NIST
* most importantly django comes with  default admin panel
* highly scalable and secure 
* we can extend  the functionality in the future. 

section -2 
-----------------------------
1) installing django
vs code
git bash

2) creating virtual environment :-
  * we have multiple projects and multiple packages  each one will have separate versions so, to avoid the crashing and overlying of projects  we are using the ENV.

3)comments for creatin virtual environment using git bash
---------------------------
creating an environment:-
1. pip install virtualenv
2.python -m venv env  #(env name)

to activate the environment
1. source env/Scripts/activate

to deactivate
1. deactivate
------------------------
pip freeze command is used to view all the downloaded packages in the computer.

now installing django
1.pip install django  (latest version shoul be installed in vir environment0
---------------------------------------------
Section -3
to start the project
1.django-admin startproject mysite  .(mysite be a project name)

2. code . (open in vs code)

to run the server:
3.python manage.py runserver  (For running the development server)

For Creating new app:
4.python manage.py startapp<app_name>

For Creating a super user
5. python manage.py createsuperuser

For changing the password;
6.python manage.py changepassword<you_user_name>

For Creating a tables
7. pyton manage.py makemigrations
----------------------------------------------
( 9 PROJECT LEVEL FILE STRUCURE)

*a python package is basically a folder.
*that contains collection of modules.
*modules are nothing but that contains functions classes and variables.
* we will import the package whenever we need to reuse the code.
*impoting happens by __init__ .py file.
*wsgi stands for (Web Server Gateway Interface )used for (how the server should interact with the web applications).
*asgi.py similar to wsgi stands for (Asynchronous Server Gateway Interface).
*urls.py (Universal Resource Locator) it is used to  address resources  of images websites and web pages etc...
*settings .py It is used for all the configurations for our prjct

(10 Django settings explained)

* Secretkey is used for hasing purpose.
*default key generated by defaultly 
*And the middleware is used to perform the various functions in your application.

These functions can be security sessions, form protection and authentication.

ET cetera.
*And then root url conf.

So this actually tells that the main URL configuration resides in this part.

My site dot URLs.

That means that this url config is actually inside this my site folder and then urls.py.

*And then we have static URL, so whatever the CSS, JavaScript and image files we use in the website
are called static files.

(how Exactly Django works)
* Django follows MVT  pattern
Django follows a software design pattern that means model, view and template.

But what is design pattern?

The design pattern is nothing but the way of defining the rules of developing software applications.

So these design patterns have some set of rules that we need to follow while developing any software
applications.

Model view and template.

This model is responsible for each and every database operations.

If you want to do anything related to the database, then you must contact this model.

All right, now we have template.

So the template is basically a user facing front end layout.

This can be HTML or bootstrap.

This template is the only thing that can be seen by the users because this is the front end layout,
 whatever the data we want to show to the user, then we just provide the data to the template so
that the user can see it.
Okay, but who will provide the data?
This is where the view comes in view acts as the bridge between the template and the model view is actually
a function where we write the logic.
__________________________________________________

*python manage.py startapp employees :-In django folder we can have multiple apps 
to keep our code separately
eg e-commerce websites(like orders, billing, cart)

*python manage.py migrate  :- to create a tbles inside the app

*python manage.py createsuperuser:- to login in the admin panel we creating a super user to login with 
credentials.
Username (leave blank to use 'viswa'): djangoadmin
Email address: developer.vish@gmail.com
Password:
Password (again):
Superuser created successfully.
__________________________________________________

models.py- used to create tables and fields in sqlite default database.

commands to create tables:-
python manage.py makemigrations :- create a migration file
python manage.py migrate:- to execute the sql commands